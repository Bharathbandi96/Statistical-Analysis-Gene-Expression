library(MASS)
library(kableExtra)

### R Markdown

### Read the data into RStudio (or R) using the read.csv R command

 

InitialData <- read.csv(file="gene-expression-invasive-vs-noninvasive-cancer.csv")

 

### Check using the str, dim and dimnames command it worked - parts of the generated output are added as comments; lines starting with "#" comments and not R code. 

 

str(InitialData)

 

### 'data.frame':	78 obs. of  4949 variables:
### $ J00129        : num  -0.448 -0.48 -0.568 -0.819 -0.112 -0.391 -0.624 -0.528 -0.811 -0.839 ...
### $ Contig29982_RC: num  -0.296 -0.512 -0.411 -0.267 -0.67 -0.31 -0.12 -0.447 -0.536 2 ...
### ...


 

dim(InitialData)

 

### [1]   78 4949
 

 

dimnames(InitialData)[[2]][4947:4949]

 


### [1] "NM_000898" "AF067420"  "Class" 


### The data set has 78 rows (patients) 4949 columns with 4948 gene expression measurement of cancer tissue, each column representing a 'gene' with column 4949 having the information of a class variable with two values: 1 and 2.

 

table(InitialData[4949])

 

### Class
### 1  2 
### 34 44 

### To gurantee that your data narrative is individual we ask you to set the seed of the random number generator with R function set.seed using your Registration Number; for example "2244222" - replace by your registration number

 

set.seed(2311347)

 

### Note: R function set.seed generates no R output. Make sure that you run your final data analysis with the submitted R code and that all tables and figures are generated by the final code. You may use R Mark Down or similar R tools to support this.

### Selects your random individual subset of 10 genes
 
 

my.gene.subset <- rank(runif(1:4948))[1:10] 
my.gene.subset
rank(runif(1:4948))[1:10]

 

###  [1] 4136 4878  175 1409 3208   69 1571 4844  211 3325

### Store sample data of 10 random gene data into a variable. 
 

my_gene_subset_data <- InitialData[my.gene.subset]

 

### Check whether dataset has any null values or not
 

sum(is.na(my_gene_subset_data))

 

### 1.a) Compute the variance, co-variance and correlation matrix of your random subset of 10 genes. Add an appropriate table to your report.

### Calculating the variance of the sample random gene data.
 

my_gene_var <- var(my_gene_subset_data)
my_gene_var
my_gene_var_table <- kable(my_gene_var, digit=3)
my_gene_var_table




### Calculating the co-relation of the sample random gene data.
 

my_gene_cor <- cor(my_gene_subset_data)
my_gene_cor
my_gene_cor_table <- kable(my_gene_cor, digit=3)
my_gene_cor_table
min(my_gene_cor)
max(my_gene_cor)
 

### Calculating the co-variance of the sample random gene data.
 

my_gene_cov <- cov(my_gene_subset_data)
my_gene_cov
mean(my_gene_cov)
my_gene_cov_table <- kable(my_gene_cov, digit=3)
my_gene_cov_table
min(my_gene_cov)
max(my_gene_cov)


### 1.b) Using R to calculate the distance matrix of your random subset of 10 genes. Add an appropriate table to your report.
 

dist_matrix <- dist(my_gene_subset_data)
as_matrix <- as.matrix(dist_matrix)

kable(as_matrix[,1:28], digit=3)
kable(as_matrix[,29:53], digit=3)
kable(as_matrix[,54:78], digit=3)



### 1.c) Using R to calculate univariate Q-Q-plots and a Q-Q-plot based on the generalised distance for the observations of your random subset of 10 genes. Add appropriate figures to your report.
 
par(mfrow = c(2, 5))
for (i in my.gene.subset){
  qqnorm(InitialData[[i]], main= paste('Q-Q plot for', names(InitialData[i])))
  qqline(InitialData[[i]])
}

cm <- colMeans(my_gene_subset_data)
S <- my_gene_cov
d <- apply(my_gene_subset_data, MARGIN = 1, function(x) 
  t(x - cm) %*% solve(S) %*% (x - cm))
par(mfrow = c(1,1))
plot(qchisq((1:nrow(my_gene_subset_data) - 1/2) / nrow(my_gene_subset_data), df = 9), sort(d),
     xlab = expression(paste(chi[3]^2, " Quantile")), 
     ylab = "Ordered distances"); abline(a = 0, b = 1)


### 2) Use R for a principal component analysis of your random subset of 10 genes. Add appropriate tables and figures to your report.
 

my_gene_principle_comp <- princomp(my_gene_subset_data, cor = FALSE)
my_gene_principle_comp
names(my_gene_principle_comp)
summary(my_gene_principle_comp, loadings = TRUE,cutoff=.1)
plot(my_gene_principle_comp)
pairs(my_gene_principle_comp$scores)


### 3.a) Fit a multivariate analysis of variance model (MANOVA) to your random subset of 10 genes. Investigate if there is a difference between invasive (label 1) and noninvasive (label 2) cancer. Note: You need to add column 4949 containing the information invasive and noninvasive cancer to your random subset of 10 genes. Add appropriate tables and figures to your report.
 

my_gene_subset_data$Class <- InitialData$Class

my_gene_subset_matrix <- as.matrix(my_gene_subset_data[,c(1:10)])

my_gene_subset_manova_fit <- manova(my_gene_subset_matrix~my_gene_subset_data$Class)

summary(my_gene_subset_manova_fit,intercept=TRUE)


### 3.b) Use the first and second principal component to illustrate, if there is a difference between invasive and noninvasive cancer. Add appropriate tables and figures to your report.
 

my_gene_subset_manova_fit_one_two <- manova(my_gene_principle_comp$scores[,1:2]~my_gene_subset_data$Class)

summary(my_gene_subset_manova_fit_one_two, intercept=TRUE)


### 4.a) Apply LDA to your random subset of 10 genes and the class variable (invasive (label 1) and noninvasive (label 2) cancer). Calculate a confusion matrix, sensitivity, specificity and misclassification error. Add appropriate tables and figures to your report.
 

my_gene_subset_lda <- lda(Class~., data=my_gene_subset_data)
my_gene_subset_lda
my_gene_subset_data$Class

my_gene_subset_lda_predicted <- predict(my_gene_subset_lda)$class
my_gene_subset_lda_predicted

table(my_gene_subset_lda_predicted, my_gene_subset_data$Class) 

table(my_gene_subset_data$Class)
table(my_gene_subset_lda_predicted)

misclassification_error_lda <- (table(my_gene_subset_lda_predicted, my_gene_subset_data$Class)[1,2] + 
    table(my_gene_subset_lda_predicted, my_gene_subset_data$Class)[2,1]) / (dim(my_gene_subset_data)[1])
misclassification_error_lda

sensitivity_error_lda <- (table(my_gene_subset_lda_predicted, my_gene_subset_data$Class)[2,2] / 
                        (table(my_gene_subset_lda_predicted, my_gene_subset_data$Class)[2,1]+table(my_gene_subset_lda_predicted, my_gene_subset_data$Class)[2,2]))
sensitivity_error_lda


specificity_error_lda <- (table(my_gene_subset_lda_predicted, my_gene_subset_data$Class)[1,1] / 
                        (table(my_gene_subset_lda_predicted, my_gene_subset_data$Class)[1,1]+table(my_gene_subset_lda_predicted, my_gene_subset_data$Class)[2,1]))
specificity_error_lda


### 4.b) Apply Quadratic discriminant analysis (QDA) to your random subset of 10 genes and the class variable (invasive (label 1) and noninvasive (label 2) cancer). Calculate a confusion matrix, sensitivity, specificity and misclassification error. Add appropriate tables and figures to your report.
 

my_gene_subset_qda <- qda(Class~., data=my_gene_subset_data)
my_gene_subset_qda
my_gene_subset_data$Class


my_gene_subset_qda_predicted <- predict(my_gene_subset_qda)$class
my_gene_subset_qda_predicted

confusion_matrix <- table(my_gene_subset_qda_predicted, my_gene_subset_data$Class) 
confusion_matrix
table(my_gene_subset_data$Class)
table(my_gene_subset_qda_predicted)

misclassification_error_qda <- (confusion_matrix[2] + confusion_matrix[3]) / (dim(my_gene_subset_data)[1])
misclassification_error_qda

sensitivity_error_qda <- (confusion_matrix[1] / (confusion_matrix[1]+confusion_matrix[2]))
sensitivity_error_qda


specificity_error_qda <- (confusion_matrix[4] / (confusion_matrix[3]+confusion_matrix[4]))
specificity_error_qda


 
### 4.c) Discuss the difference between LDA and QDA using the results on your random subset of 10 genes and the class variable (invasive (label 1) and noninvasive (label 2) cancer).

There is a difference between the two models after LDA and QDA is performed on the subset. The results are better when QDA is used in place of LDA. We can observe that the Specificity has increased from 67% to 88%. sensitivity increased from 76% to 79% and the misclassification error rate has been decreased from 25% to 15%. Hence we can conclude that for our dataset, QDA performs better than LDA. 


### 5) Use the median of the first principal component of your random subset of 10 genes to predict the class variable (invasive (label 1) and noninvasive (label 2) cancer). Use Fisherâ€™s Exact test and sensitivity, specificity and Youden index. Add appropriate tables and figures to your report.
 
pca_median <- median(my_gene_principle_comp$scores[,1])
pca_median

my_new_gene_data <- my_gene_subset_data
my_new_gene_data$prid_median <- NA
my_new_gene_data$prid_median <- ifelse(my_gene_principle_comp$scores[,1] < pca_median, 1, 2)
my_new_gene_data
my_new_confusion_matrix <- table(my_new_gene_data$prid_median, my_new_gene_data$Class)
my_new_confusion_matrix

new_sensitivity_error <- (my_new_confusion_matrix[1] / (my_new_confusion_matrix[1]+my_new_confusion_matrix[2]))
new_sensitivity_error


new_specificity_error <- (my_new_confusion_matrix[4] / (my_new_confusion_matrix[3]+my_new_confusion_matrix[4]))

new_specificity_error

fisher_test <- fisher.test(my_new_confusion_matrix)
fisher_test

youden_index <- (new_sensitivity_error + new_specificity_error) -1
youden_index